<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnBarcodeType_TestSuite" Id="{5183a18b-aa80-00bd-0ac6-9cc6c34803a8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnBarcodeType_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{b8c75d68-254d-0fdf-14aa-a83b3829639e}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{273c6891-a903-0e32-2edd-049e2890aa16}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{e76de411-353f-0268-01fc-409820d8d681}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{348100a0-0c4e-0424-0497-5d77be1caa63}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : STRING := 'ETcVnBarcodeType';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{f1e2d984-126c-0bd7-124b-8def4cb6e2e7}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{584f637a-7f68-059e-3c9e-63654ff7d38d}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{62c26757-da33-0033-3abc-8c10b3e54f69}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ENUM","identifier":"ETcVnBarcodeType","enumerations":["TCVN_BT_CODABAR","TCVN_BT_CODE39","TCVN_BT_CODE93","TCVN_BT_CODE128","TCVN_BT_EAN8","TCVN_BT_EAN13","TCVN_BT_ITF","TCVN_BT_UPCA","TCVN_BT_UPCE","TCVN_BT_ANY","TCVN_BT_CODE39EXTENDED"],"baseType":{"typeName":"UDINT","minValue":0,"maxValue":4294967295,"isSigned":false,"isFloat":false}}'; 
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{6363da0c-1e8d-0710-3338-32a09bc4782d}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_BT_CODABAR"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{9c0530b4-d953-0279-39b3-fa99763e922c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : UDINT := SIZEOF(ETcVnBarcodeType);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{ea0052e0-9b85-04d8-1719-febf3b097b14}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_BT_CODABAR"';
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{ca824b26-3475-0034-1ba2-bf3010698569}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{e101c1ef-e953-0a7e-119d-72696a2a5750}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{e0f49207-f61f-06b1-0c5d-5a2706aabc52}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{dd4194f6-3447-0598-2a67-36b29f8becb1}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{520b2fd1-025e-0cf6-36a3-f66ae0b8eb12}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>