<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnAdaptiveThresholdMethod_TestSuite" Id="{e0886a07-b8d8-0448-3d78-46831128d6fd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnAdaptiveThresholdMethod_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{ffdfa659-000c-0461-399b-6f644f8ad601}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{f929ff5f-3d70-0eca-2655-759d781a4926}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	target : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{ece90365-083d-0f4a-13ec-b15c51ab304a}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{4a859c13-dda8-0908-128b-f9083270e49a}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : STRING := 'ETcVnAdaptiveThresholdMethod';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{3a4093f8-c464-0004-0ceb-4352a59bae29}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	target : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{40e4ff1d-a07d-060a-12d1-b646a521718d}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	target : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{676552d0-402c-0f8d-2a21-3de055f0e6ab}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ENUM","identifier":"ETcVnAdaptiveThresholdMethod","enumerations":["TCVN_ATM_MEAN","TCVN_ATM_GAUSSIAN"],"baseType":{"typeName":"DINT","minValue":-2147483648,"maxValue":2147483647,"isSigned":true,"isFloat":false}}'; 
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{1ae42b9d-7f8f-02a9-0af3-33b468e1cdbc}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_ATM_MEAN"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{9a12eac7-5893-0c1e-13e2-31730cbc719d}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : UDINT := SIZEOF(ETcVnAdaptiveThresholdMethod);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{32285721-271f-0c81-2648-5e4a25620ed5}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_ATM_MEAN"';
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    actual : ETcVnAdaptiveThresholdMethod;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{b0bacefb-6123-0e2b-11d8-a7e195badc3c}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	target : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{58e56aab-6ed9-0005-2373-9db915322918}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
	target : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{e75a0e4c-a962-06de-1f45-db16f1b0f88b}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{def16868-a18b-0a9a-1ac0-55ee8912c2e5}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnAdaptiveThresholdMethod.TCVN_ATM_GAUSSIAN;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{c299f889-9aaf-07c1-3060-7a7a40c883c3}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    expected : ETcVnAdaptiveThresholdMethod := ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN;
    actual : ETcVnAdaptiveThresholdMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>